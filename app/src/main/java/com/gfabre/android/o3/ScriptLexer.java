/* The following code was generated by JFlex 1.7.0 */

package com.gfabre.android.o3;

/* JFlex Script Lexical Analyzer definition file : yylex() will return script tokens  */
import java_cup.runtime.*;
import java.lang.String;
import java.lang.Double;

/**
 * This class defines the Script Lexical Analyzer
 */

public class ScriptLexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\14\1\27\1\2\1\0\1\3\1\1\16\14\4\0\1\27\1\20"+
    "\1\21\1\0\1\13\1\55\4\0\1\5\1\12\1\0\1\6\1\10"+
    "\1\4\3\7\1\53\6\7\2\0\1\56\1\60\1\57\1\17\1\0"+
    "\3\13\1\54\1\11\25\13\1\15\1\0\1\16\1\0\1\36\1\0"+
    "\1\32\1\45\1\31\1\25\1\26\1\22\1\43\1\35\1\41\1\13"+
    "\1\46\1\30\1\33\1\24\1\50\1\42\1\13\1\37\1\40\1\34"+
    "\1\23\1\52\1\44\1\47\1\13\1\51\4\0\41\14\2\0\4\13"+
    "\4\0\1\13\2\0\1\14\7\0\1\13\4\0\1\13\5\0\27\13"+
    "\1\0\37\13\1\0\u01ca\13\4\0\14\13\16\0\5\13\7\0\1\13"+
    "\1\0\1\13\21\0\160\14\5\13\1\0\2\13\2\0\4\13\10\0"+
    "\1\13\1\0\3\13\1\0\1\13\1\0\24\13\1\0\123\13\1\0"+
    "\213\13\1\0\5\14\2\0\236\13\11\0\46\13\2\0\1\13\7\0"+
    "\47\13\7\0\1\13\1\0\55\14\1\0\1\14\1\0\2\14\1\0"+
    "\2\14\1\0\1\14\10\0\33\13\5\0\3\13\15\0\5\14\6\0"+
    "\1\13\4\0\13\14\5\0\53\13\37\14\4\0\2\13\1\14\143\13"+
    "\1\0\1\13\10\14\1\0\6\14\2\13\2\14\1\0\4\14\2\13"+
    "\12\14\3\13\2\0\1\13\17\0\1\14\1\13\1\14\36\13\33\14"+
    "\2\0\131\13\13\14\1\13\16\0\12\14\41\13\11\14\2\13\4\0"+
    "\1\13\5\0\26\13\4\14\1\13\11\14\1\13\3\14\1\13\5\14"+
    "\22\0\31\13\3\14\104\0\1\13\1\0\13\13\67\0\33\14\1\0"+
    "\4\14\66\13\3\14\1\13\22\14\1\13\7\14\12\13\2\14\2\0"+
    "\12\14\1\0\7\13\1\0\7\13\1\0\3\14\1\0\10\13\2\0"+
    "\2\13\2\0\26\13\1\0\7\13\1\0\1\13\3\0\4\13\2\0"+
    "\1\14\1\13\7\14\2\0\2\14\2\0\3\14\1\13\10\0\1\14"+
    "\4\0\2\13\1\0\3\13\2\14\2\0\12\14\4\13\7\0\1\13"+
    "\5\0\3\14\1\0\6\13\4\0\2\13\2\0\26\13\1\0\7\13"+
    "\1\0\2\13\1\0\2\13\1\0\2\13\2\0\1\14\1\0\5\14"+
    "\4\0\2\14\2\0\3\14\3\0\1\14\7\0\4\13\1\0\1\13"+
    "\7\0\14\14\3\13\1\14\13\0\3\14\1\0\11\13\1\0\3\13"+
    "\1\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0\1\14"+
    "\1\13\10\14\1\0\3\14\1\0\3\14\2\0\1\13\17\0\2\13"+
    "\2\14\2\0\12\14\1\0\1\13\17\0\3\14\1\0\10\13\2\0"+
    "\2\13\2\0\26\13\1\0\7\13\1\0\2\13\1\0\5\13\2\0"+
    "\1\14\1\13\7\14\2\0\2\14\2\0\3\14\10\0\2\14\4\0"+
    "\2\13\1\0\3\13\2\14\2\0\12\14\1\0\1\13\20\0\1\14"+
    "\1\13\1\0\6\13\3\0\3\13\1\0\4\13\3\0\2\13\1\0"+
    "\1\13\1\0\2\13\3\0\2\13\3\0\3\13\3\0\14\13\4\0"+
    "\5\14\3\0\3\14\1\0\4\14\2\0\1\13\6\0\1\14\16\0"+
    "\12\14\11\0\1\13\7\0\3\14\1\0\10\13\1\0\3\13\1\0"+
    "\27\13\1\0\12\13\1\0\5\13\3\0\1\13\7\14\1\0\3\14"+
    "\1\0\4\14\7\0\2\14\1\0\2\13\6\0\2\13\2\14\2\0"+
    "\12\14\22\0\2\14\1\0\10\13\1\0\3\13\1\0\27\13\1\0"+
    "\12\13\1\0\5\13\2\0\1\14\1\13\7\14\1\0\3\14\1\0"+
    "\4\14\7\0\2\14\7\0\1\13\1\0\2\13\2\14\2\0\12\14"+
    "\1\0\2\13\17\0\2\14\1\0\10\13\1\0\3\13\1\0\51\13"+
    "\2\0\1\13\7\14\1\0\3\14\1\0\4\14\1\13\10\0\1\14"+
    "\10\0\2\13\2\14\2\0\12\14\12\0\6\13\2\0\2\14\1\0"+
    "\22\13\3\0\30\13\1\0\11\13\1\0\1\13\2\0\7\13\3\0"+
    "\1\14\4\0\6\14\1\0\1\14\1\0\10\14\22\0\2\14\15\0"+
    "\60\13\1\14\2\13\7\14\4\0\10\13\10\14\1\0\12\14\47\0"+
    "\2\13\1\0\1\13\2\0\2\13\1\0\1\13\2\0\1\13\6\0"+
    "\4\13\1\0\7\13\1\0\3\13\1\0\1\13\1\0\1\13\2\0"+
    "\2\13\1\0\4\13\1\14\2\13\6\14\1\0\2\14\1\13\2\0"+
    "\5\13\1\0\1\13\1\0\6\14\2\0\12\14\2\0\4\13\40\0"+
    "\1\13\27\0\2\14\6\0\12\14\13\0\1\14\1\0\1\14\1\0"+
    "\1\14\4\0\2\14\10\13\1\0\44\13\4\0\24\14\1\0\2\14"+
    "\5\13\13\14\1\0\44\14\11\0\1\14\71\0\53\13\24\14\1\13"+
    "\12\14\6\0\6\13\4\14\4\13\3\14\1\13\3\14\2\13\7\14"+
    "\3\13\4\14\15\13\14\14\1\13\17\14\2\0\46\13\1\0\1\13"+
    "\5\0\1\13\2\0\53\13\1\0\u014d\13\1\0\4\13\2\0\7\13"+
    "\1\0\1\13\1\0\4\13\2\0\51\13\1\0\4\13\2\0\41\13"+
    "\1\0\4\13\2\0\7\13\1\0\1\13\1\0\4\13\2\0\17\13"+
    "\1\0\71\13\1\0\4\13\2\0\103\13\2\0\3\14\40\0\20\13"+
    "\20\0\125\13\14\0\u026c\13\2\0\21\13\1\0\32\13\5\0\113\13"+
    "\3\0\3\13\17\0\15\13\1\0\4\13\3\14\13\0\22\13\3\14"+
    "\13\0\22\13\2\14\14\0\15\13\1\0\3\13\1\0\2\14\14\0"+
    "\64\13\40\14\3\0\1\13\3\0\2\13\1\14\2\0\12\14\41\0"+
    "\3\14\2\0\12\14\6\0\130\13\10\0\51\13\1\14\1\13\5\0"+
    "\106\13\12\0\35\13\3\0\14\14\4\0\14\14\12\0\12\14\36\13"+
    "\2\0\5\13\13\0\54\13\4\0\21\14\7\13\2\14\6\0\12\14"+
    "\46\0\27\13\5\14\4\0\65\13\12\14\1\0\35\14\2\0\13\14"+
    "\6\0\12\14\15\0\1\13\130\0\5\14\57\13\21\14\7\13\4\0"+
    "\12\14\21\0\11\14\14\0\3\14\36\13\15\14\2\13\12\14\54\13"+
    "\16\14\14\0\44\13\24\14\10\0\12\14\3\0\3\13\12\14\44\13"+
    "\122\0\3\14\1\0\25\14\4\13\1\14\4\13\3\14\2\13\11\0"+
    "\300\13\47\14\25\0\4\14\u0116\13\2\0\6\13\2\0\46\13\2\0"+
    "\6\13\2\0\10\13\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\37\13\2\0\65\13\1\0\7\13\1\0\1\13\3\0\3\13\1\0"+
    "\7\13\3\0\4\13\2\0\6\13\4\0\15\13\5\0\3\13\1\0"+
    "\7\13\16\0\5\14\32\0\5\14\20\0\2\13\23\0\1\13\13\0"+
    "\5\14\5\0\6\14\1\0\1\13\15\0\1\13\20\0\15\13\3\0"+
    "\33\13\25\0\15\14\4\0\1\14\3\0\14\14\21\0\1\13\4\0"+
    "\1\13\2\0\12\13\1\0\1\13\3\0\5\13\6\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\4\13\1\0\13\13\2\0\4\13\5\0"+
    "\5\13\4\0\1\13\21\0\51\13\u0a77\0\57\13\1\0\57\13\1\0"+
    "\205\13\6\0\4\13\3\14\2\13\14\0\46\13\1\0\1\13\5\0"+
    "\1\13\2\0\70\13\7\0\1\13\17\0\1\14\27\13\11\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13\1\0\7\13"+
    "\1\0\7\13\1\0\7\13\1\0\40\14\57\0\1\13\u01d5\0\3\13"+
    "\31\0\11\13\6\14\1\0\5\13\2\0\5\13\4\0\126\13\2\0"+
    "\2\14\2\0\3\13\1\0\132\13\1\0\4\13\5\0\51\13\3\0"+
    "\136\13\21\0\33\13\65\0\20\13\u0200\0\u19b6\13\112\0\u51cd\13\63\0"+
    "\u048d\13\103\0\56\13\2\0\u010d\13\3\0\20\13\12\14\2\13\24\0"+
    "\57\13\1\14\4\0\12\14\1\0\31\13\7\0\1\14\120\13\2\14"+
    "\45\0\11\13\2\0\147\13\2\0\4\13\1\0\4\13\14\0\13\13"+
    "\115\0\12\13\1\14\3\13\1\14\4\13\1\14\27\13\5\14\20\0"+
    "\1\13\7\0\64\13\14\0\2\14\62\13\21\14\13\0\12\14\6\0"+
    "\22\14\6\13\3\0\1\13\4\0\12\14\34\13\10\14\2\0\27\13"+
    "\15\14\14\0\35\13\3\0\4\14\57\13\16\14\16\0\1\13\12\14"+
    "\46\0\51\13\16\14\11\0\3\13\1\14\10\13\2\14\2\0\12\14"+
    "\6\0\27\13\3\0\1\13\1\14\4\0\60\13\1\14\1\13\3\14"+
    "\2\13\2\14\5\13\2\14\1\13\1\14\1\13\30\0\3\13\2\0"+
    "\13\13\5\14\2\0\3\13\2\14\12\0\6\13\2\0\6\13\2\0"+
    "\6\13\11\0\7\13\1\0\7\13\221\0\43\13\10\14\1\0\2\14"+
    "\2\0\12\14\6\0\u2ba4\13\14\0\27\13\4\0\61\13\u2104\0\u016e\13"+
    "\2\0\152\13\46\0\7\13\14\0\5\13\5\0\1\13\1\14\12\13"+
    "\1\0\15\13\1\0\5\13\1\0\1\13\1\0\2\13\1\0\2\13"+
    "\1\0\154\13\41\0\u016b\13\22\0\100\13\2\0\66\13\50\0\15\13"+
    "\3\0\20\14\20\0\7\14\14\0\2\13\30\0\3\13\31\0\1\13"+
    "\6\0\5\13\1\0\207\13\2\0\1\14\4\0\1\13\13\0\12\14"+
    "\7\0\32\13\4\0\1\13\1\0\32\13\13\0\131\13\3\0\6\13"+
    "\2\0\6\13\2\0\6\13\2\0\3\13\3\0\2\13\3\0\2\13"+
    "\22\0\3\14\4\0\14\13\1\0\32\13\1\0\23\13\1\0\2\13"+
    "\1\0\17\13\2\0\16\13\42\0\173\13\105\0\65\13\210\0\1\14"+
    "\202\0\35\13\3\0\61\13\57\0\37\13\21\0\33\13\65\0\36\13"+
    "\2\0\44\13\4\0\10\13\1\0\5\13\52\0\236\13\2\0\12\14"+
    "\u0356\0\6\13\2\0\1\13\1\0\54\13\1\0\2\13\3\0\1\13"+
    "\2\0\27\13\252\0\26\13\12\0\32\13\106\0\70\13\6\0\2\13"+
    "\100\0\1\13\3\14\1\0\2\14\5\0\4\14\4\13\1\0\3\13"+
    "\1\0\33\13\4\0\3\14\4\0\1\14\40\0\35\13\203\0\66\13"+
    "\12\0\26\13\12\0\23\13\215\0\111\13\u03b7\0\3\14\65\13\17\14"+
    "\37\0\12\14\20\0\3\14\55\13\13\14\2\0\1\14\22\0\31\13"+
    "\7\0\12\14\6\0\3\14\44\13\16\14\1\0\12\14\100\0\3\14"+
    "\60\13\16\14\4\13\13\0\12\14\u04a6\0\53\13\15\14\10\0\12\14"+
    "\u0936\0\u036f\13\221\0\143\13\u0b9d\0\u042f\13\u33d1\0\u0239\13\u04c7\0\105\13"+
    "\13\0\1\13\56\14\20\0\4\14\15\13\u4060\0\2\13\u2163\0\5\14"+
    "\3\0\26\14\2\0\7\14\36\0\4\14\224\0\3\14\u01bb\0\125\13"+
    "\1\0\107\13\1\0\2\13\2\0\1\13\2\0\2\13\2\0\4\13"+
    "\1\0\14\13\1\0\1\13\1\0\7\13\1\0\101\13\1\0\4\13"+
    "\2\0\10\13\1\0\7\13\1\0\34\13\1\0\4\13\1\0\5\13"+
    "\1\0\1\13\3\0\7\13\1\0\u0154\13\2\0\31\13\1\0\31\13"+
    "\1\0\37\13\1\0\31\13\1\0\37\13\1\0\31\13\1\0\37\13"+
    "\1\0\31\13\1\0\37\13\1\0\31\13\1\0\10\13\2\0\62\14"+
    "\u1600\0\4\13\1\0\33\13\1\0\2\13\1\0\1\13\2\0\1\13"+
    "\1\0\12\13\1\0\4\13\1\0\1\13\1\0\1\13\6\0\1\13"+
    "\4\0\1\13\1\0\1\13\1\0\1\13\1\0\3\13\1\0\2\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\2\13\1\0\1\13\2\0\4\13\1\0\7\13"+
    "\1\0\4\13\1\0\4\13\1\0\1\13\1\0\12\13\1\0\21\13"+
    "\5\0\3\13\1\0\5\13\1\0\21\13\u1144\0\ua6d7\13\51\0\u1035\13"+
    "\13\0\336\13\u3fe2\0\u021e\13\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u05ee\0"+
    "\1\14\36\0\140\14\200\0\360\14\uffff\0\uffff\0\ufe12\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\3\1\1\3\25\1\2\4\1\2"+
    "\1\0\2\5\2\6\1\0\1\3\1\0\2\7\1\10"+
    "\2\0\1\11\26\0\1\12\3\0\2\13\2\14\2\0"+
    "\2\15\5\0\1\3\1\0\1\16\1\0\1\17\2\0"+
    "\1\20\1\21\23\0\2\22\2\23\2\24\2\25\1\0"+
    "\1\2\1\26\1\27\3\0\1\30\1\0\1\31\2\0"+
    "\1\32\1\0\1\33\1\34\7\0\1\35\1\36\6\0"+
    "\1\37\4\0\1\40\1\0\1\41\1\42\2\0\1\43"+
    "\1\44\1\0\1\45\1\0\1\46\1\47\3\0\1\50"+
    "\3\0\1\51\1\0\1\52\3\0\1\53\12\0\1\54"+
    "\1\55\2\0\1\56\5\0\1\57\2\0\1\60\4\0"+
    "\1\61\2\0\1\62\1\63\1\64\1\0\1\65";

  private static int [] zzUnpackAction() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\61\0\223\0\304\0\365\0\u0126"+
    "\0\u0157\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae"+
    "\0\u02df\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436"+
    "\0\u0467\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\61\0\u058d"+
    "\0\u05be\0\u05ef\0\61\0\u0620\0\61\0\u0157\0\u0651\0\u0682"+
    "\0\u06b3\0\61\0\u06e4\0\u0715\0\u0746\0\u0777\0\u07a8\0\u07d9"+
    "\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u08ff\0\u0930\0\u0961"+
    "\0\u0992\0\u09c3\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\61\0\u0bde\0\u0c0f\0\u0c40"+
    "\0\u0c71\0\61\0\u0ca2\0\61\0\u0cd3\0\u0d04\0\u0d35\0\61"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e2a\0\u0e5b\0\u0746"+
    "\0\u0e8c\0\u07d9\0\u0ebd\0\u0eee\0\61\0\u0f1f\0\u0f50\0\u0f81"+
    "\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\61\0\u1324\0\61\0\u1355\0\61\0\u1386"+
    "\0\61\0\u13b7\0\u0dc8\0\u13e8\0\u1419\0\u144a\0\u147b\0\u14ac"+
    "\0\61\0\u14dd\0\u150e\0\u153f\0\u1570\0\61\0\u15a1\0\61"+
    "\0\u15d2\0\u1603\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729"+
    "\0\u175a\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1"+
    "\0\61\0\u18e2\0\u1913\0\u1944\0\u1975\0\61\0\u19a6\0\61"+
    "\0\61\0\u19d7\0\u1a08\0\61\0\61\0\u1a39\0\61\0\u1a6a"+
    "\0\61\0\61\0\u1a9b\0\u1acc\0\u1afd\0\61\0\u1b2e\0\u1b5f"+
    "\0\u1b90\0\61\0\u1bc1\0\61\0\u1bf2\0\u1c23\0\u1c54\0\61"+
    "\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc"+
    "\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\61\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u2059\0\u208a\0\61"+
    "\0\u20bb\0\u20ec\0\u211d\0\u214e\0\61\0\u217f\0\u21b0\0\61"+
    "\0\61\0\u21e1\0\u2212\0\u2212";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\2\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\2\1\12\4\2\1\13\1\14\1\2\1\15\1\16"+
    "\1\17\1\20\1\21\1\4\1\22\1\23\1\2\1\24"+
    "\3\2\1\25\1\26\1\27\1\30\1\2\1\31\6\2"+
    "\1\10\1\2\1\32\1\33\1\34\1\35\63\0\1\4"+
    "\57\0\1\36\2\37\1\40\1\41\21\0\1\37\32\0"+
    "\1\42\2\43\23\0\1\43\32\0\1\44\2\45\3\0"+
    "\1\10\1\46\16\0\1\45\23\0\1\10\14\0\1\10"+
    "\1\47\1\50\14\0\1\50\24\0\1\10\14\0\1\47"+
    "\43\0\1\47\6\0\1\51\2\52\23\0\1\52\42\0"+
    "\1\53\1\0\1\53\1\0\1\54\3\0\1\55\5\53"+
    "\1\0\23\53\1\0\1\53\15\0\1\56\1\0\1\56"+
    "\1\0\1\57\3\0\1\60\5\56\1\0\23\56\1\0"+
    "\1\56\27\0\1\61\77\0\1\62\44\0\1\63\55\0"+
    "\1\64\2\0\1\65\10\0\1\66\10\0\1\67\34\0"+
    "\1\70\3\0\1\71\6\0\1\72\7\0\1\73\52\0"+
    "\1\74\47\0\1\75\17\0\1\76\42\0\1\77\51\0"+
    "\1\100\6\0\1\101\15\0\1\102\44\0\1\103\7\0"+
    "\1\104\36\0\1\105\66\0\1\106\17\0\1\107\45\0"+
    "\1\110\24\0\1\111\2\112\23\0\1\112\32\0\1\113"+
    "\2\114\23\0\1\114\27\0\1\115\1\116\1\0\1\117"+
    "\2\120\23\0\1\120\30\0\1\121\60\0\1\122\2\0"+
    "\1\37\56\0\1\40\1\3\1\4\56\40\5\123\1\124"+
    "\53\123\2\0\1\43\60\0\1\45\65\0\1\47\1\0"+
    "\1\50\14\0\1\50\24\0\1\47\13\0\1\125\1\126"+
    "\2\0\1\125\40\0\1\126\7\0\1\52\65\0\1\53"+
    "\1\0\1\53\1\0\2\53\5\0\5\53\1\0\25\53"+
    "\22\0\1\127\42\0\1\130\2\0\56\130\7\0\1\56"+
    "\1\0\1\56\1\0\2\56\5\0\5\56\1\0\25\56"+
    "\22\0\1\131\42\0\1\132\2\0\56\132\24\0\1\133"+
    "\61\0\1\134\76\0\1\135\57\0\1\136\63\0\1\137"+
    "\63\0\1\140\44\0\1\141\51\0\1\142\73\0\1\143"+
    "\52\0\1\144\67\0\1\145\43\0\1\146\62\0\1\147"+
    "\62\0\1\150\64\0\1\151\50\0\1\152\60\0\1\153"+
    "\64\0\1\154\62\0\1\155\60\0\1\156\76\0\1\157"+
    "\62\0\1\160\47\0\1\161\21\0\1\112\60\0\1\114"+
    "\57\0\1\162\2\163\23\0\1\163\32\0\1\164\2\165"+
    "\23\0\1\165\33\0\1\120\57\0\1\166\2\167\23\0"+
    "\1\167\32\0\1\170\2\171\23\0\1\171\31\0\5\123"+
    "\1\172\57\123\1\173\1\172\53\123\7\0\1\126\43\0"+
    "\1\126\16\0\1\174\1\0\1\174\6\0\5\174\1\0"+
    "\23\174\1\0\1\174\15\0\1\175\1\0\1\175\6\0"+
    "\5\175\1\0\23\175\1\0\1\175\31\0\1\176\3\0"+
    "\1\177\61\0\1\200\52\0\1\201\57\0\1\202\77\0"+
    "\1\203\54\0\1\204\60\0\1\205\50\0\1\206\72\0"+
    "\1\207\54\0\1\210\52\0\1\211\64\0\1\212\76\0"+
    "\1\213\45\0\1\214\61\0\1\215\65\0\1\216\45\0"+
    "\1\217\61\0\1\220\71\0\1\221\52\0\1\222\77\0"+
    "\1\223\35\0\1\224\32\0\1\163\60\0\1\165\60\0"+
    "\1\167\60\0\1\171\56\0\4\123\1\4\1\172\53\123"+
    "\7\0\1\174\1\0\1\174\1\0\2\174\5\0\5\174"+
    "\1\0\25\174\13\0\1\175\1\0\1\175\1\0\2\175"+
    "\5\0\5\175\1\0\25\175\32\0\1\225\64\0\1\226"+
    "\62\0\1\227\67\0\1\230\41\0\1\231\74\0\1\232"+
    "\42\0\1\233\16\0\1\234\2\0\1\235\42\0\1\236"+
    "\105\0\1\237\44\0\1\240\60\0\1\241\57\0\1\242"+
    "\62\0\1\243\46\0\1\244\56\0\1\245\102\0\1\246"+
    "\36\0\1\247\107\0\1\250\61\0\1\251\32\0\1\252"+
    "\54\0\1\253\5\0\1\254\60\0\1\255\56\0\1\256"+
    "\70\0\1\257\63\0\1\260\42\0\1\261\57\0\1\262"+
    "\73\0\1\263\77\0\1\264\35\0\1\265\60\0\1\266"+
    "\65\0\1\267\76\0\1\270\33\0\1\271\60\0\1\272"+
    "\61\0\1\273\75\0\1\274\64\0\1\275\33\0\1\276"+
    "\75\0\1\277\51\0\1\300\65\0\1\301\61\0\1\302"+
    "\31\0\1\303\1\0\1\303\6\0\5\303\1\271\23\303"+
    "\1\0\1\303\15\0\1\304\1\0\1\304\6\0\5\304"+
    "\1\272\23\304\1\0\1\304\33\0\1\305\70\0\1\306"+
    "\47\0\1\307\57\0\1\310\63\0\1\311\60\0\1\312"+
    "\71\0\1\313\60\0\1\314\26\0\1\303\1\0\1\303"+
    "\1\0\2\303\5\0\5\303\1\0\25\303\13\0\1\304"+
    "\1\0\1\304\1\0\2\304\5\0\5\304\1\0\25\304"+
    "\15\0\1\315\1\0\1\315\6\0\5\315\1\305\23\315"+
    "\1\0\1\315\32\0\1\316\60\0\1\317\60\0\1\320"+
    "\62\0\1\321\72\0\1\322\67\0\1\323\16\0\1\315"+
    "\1\0\1\315\1\0\2\315\5\0\5\315\1\0\25\315"+
    "\36\0\1\324\50\0\1\325\65\0\1\326\65\0\1\327"+
    "\52\0\1\330\100\0\1\331\23\0\1\332\1\0\1\332"+
    "\6\0\5\332\1\326\23\332\1\0\1\332\33\0\1\333"+
    "\40\0\1\332\1\0\1\332\1\0\2\332\5\0\5\332"+
    "\1\0\25\332\4\0\1\334\2\0\56\334";

  private static int [] zzUnpackTrans() {
    int [] result = new int[8771];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\1\11\32\1\1\11\1\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\11\1\1\2\0\1\1\26\0\1\11\3\0\1\1"+
    "\1\11\1\1\1\11\2\0\1\1\1\11\5\0\1\1"+
    "\1\0\1\1\1\0\1\1\2\0\1\11\1\1\23\0"+
    "\1\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\0\3\1\3\0\1\11\1\0\1\1\2\0\1\11"+
    "\1\0\1\11\1\1\7\0\2\1\6\0\1\11\4\0"+
    "\1\11\1\0\2\11\2\0\2\11\1\0\1\11\1\0"+
    "\2\11\3\0\1\11\3\0\1\11\1\0\1\11\3\0"+
    "\1\11\12\0\2\1\2\0\1\11\5\0\1\1\2\0"+
    "\1\11\4\0\1\11\2\0\2\11\1\1\1\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[220];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
  enum sym {
                WHILE,
                END_WHILE,
                IF,
                ELSE,
                END_IF,
                FUNDEF,
                FUNDEL,
                END_FUNDEF,
                DEBUG_BREAK,
                EXIT,
                FUNCALL,
                JAVA_MATH_CALL,
                RUN_SCRIPT,
                NEG,
                DUP,
                DUPN,
                DROP,
                DROPN,
                SWAP,
                SWAPN,
                ROLLN,
                CLEAR,
                UPDATE,
                STACK_SIZE,
                RANGE,
                POV3D,
                COLOR,
                ERASE,
                PLOT,
                PLOT3D,
                LINE,
                LINE3D,
                DOT_SIZE,
                PUSH_IDENTIFIER,
                POP_IDENTIFIER,
                PUSH_ARRAY_VALUE,
                POP_ARRAY_VALUE,
                DOUBLE_LITERAL,
                DISPLAY_MESSAGE,
                PROMPT_MESSAGE,
                SUB,
                ADD,
                DIV,
                MUL,
                MOD,
                NEQ,
                EQ,
                LT,
                LTE,
                GT,
                GTE,
                EOF,
                SYNTAX_ERROR
  };

  final static int FUNDEF_LEN = new String("fundef").length();
  final static int FUNDEL_LEN = new String("fundel").length();
  final static int FUNCALL_LEN = new String("funcall").length();
  final static int MATH_CALL_LEN = new String("math_call").length();
  final static int RUN_SCRIPT_LEN = new String("run_script").length();
  final static int PUSH_VAR_LEN = new String("!").length();
  final static int POP_VAR_LEN = new String("?").length();
  final static int PUSH_ARRAY_LEN = new String("![]").length();
  final static int POP_ARRAY_LEN = new String("?[]").length();
  final static int DISPLAY_MESSAGE_LEN = new String("!\"").length();
  final static int PROMPT_MESSAGE_LEN = new String("?\"").length();

  String identifier = null;
  String filename = null;
  Double doubleValue = null;

  public int yyline() {
      return yyline;
  }

  public int yycolumn() {
      return yycolumn;
  }

  public int yychar() {
      return yychar;
  }

  private Symbol symbol(sym type) {
    return new Symbol(type.ordinal(), yyline, yycolumn);
  }
  private Symbol symbol(sym type, Object value) {
    return new Symbol(type.ordinal(), yyline, yycolumn, value);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScriptLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2848) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
              {
                return symbol(sym.EOF);
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return symbol(sym.SYNTAX_ERROR);
            } 
            // fall through
          case 54: break;
          case 2: 
            { /* ignore */
            } 
            // fall through
          case 55: break;
          case 3: 
            { try {doubleValue = new Double(yytext());} catch (Exception e) {doubleValue = Double.NaN;} return symbol(sym.DOUBLE_LITERAL);
            } 
            // fall through
          case 56: break;
          case 4: 
            { return symbol(sym.DIV);
            } 
            // fall through
          case 57: break;
          case 5: 
            { return symbol(sym.MUL);
            } 
            // fall through
          case 58: break;
          case 6: 
            { return symbol(sym.SUB);
            } 
            // fall through
          case 59: break;
          case 7: 
            { return symbol(sym.ADD);
            } 
            // fall through
          case 60: break;
          case 8: 
            { identifier = yytext().substring(POP_VAR_LEN).trim(); return symbol(sym.POP_IDENTIFIER);
            } 
            // fall through
          case 61: break;
          case 9: 
            { identifier = yytext().substring(PUSH_VAR_LEN).trim(); return symbol(sym.PUSH_IDENTIFIER);
            } 
            // fall through
          case 62: break;
          case 10: 
            { return symbol(sym.IF);
            } 
            // fall through
          case 63: break;
          case 11: 
            { return symbol(sym.MOD);
            } 
            // fall through
          case 64: break;
          case 12: 
            { return symbol(sym.LT);
            } 
            // fall through
          case 65: break;
          case 13: 
            { return symbol(sym.GT);
            } 
            // fall through
          case 66: break;
          case 14: 
            { identifier = yytext().substring(PROMPT_MESSAGE_LEN).trim(); return symbol(sym.PROMPT_MESSAGE);
            } 
            // fall through
          case 67: break;
          case 15: 
            { identifier = yytext().substring(DISPLAY_MESSAGE_LEN).trim(); return symbol(sym.DISPLAY_MESSAGE);
            } 
            // fall through
          case 68: break;
          case 16: 
            { return symbol(sym.NEG);
            } 
            // fall through
          case 69: break;
          case 17: 
            { return symbol(sym.DUP);
            } 
            // fall through
          case 70: break;
          case 18: 
            { return symbol(sym.NEQ);
            } 
            // fall through
          case 71: break;
          case 19: 
            { return symbol(sym.LTE);
            } 
            // fall through
          case 72: break;
          case 20: 
            { return symbol(sym.GTE);
            } 
            // fall through
          case 73: break;
          case 21: 
            { return symbol(sym.EQ);
            } 
            // fall through
          case 74: break;
          case 22: 
            { identifier = yytext().substring(POP_ARRAY_LEN).trim(); return symbol(sym.POP_ARRAY_VALUE);
            } 
            // fall through
          case 75: break;
          case 23: 
            { identifier = yytext().substring(PUSH_ARRAY_LEN).trim(); return symbol(sym.PUSH_ARRAY_VALUE);
            } 
            // fall through
          case 76: break;
          case 24: 
            { return symbol(sym.DUPN);
            } 
            // fall through
          case 77: break;
          case 25: 
            { return symbol(sym.DROP);
            } 
            // fall through
          case 78: break;
          case 26: 
            { return symbol(sym.ELSE);
            } 
            // fall through
          case 79: break;
          case 27: 
            { return symbol(sym.EXIT);
            } 
            // fall through
          case 80: break;
          case 28: 
            { return symbol(sym.LINE);
            } 
            // fall through
          case 81: break;
          case 29: 
            { return symbol(sym.SWAP);
            } 
            // fall through
          case 82: break;
          case 30: 
            { return symbol(sym.PLOT);
            } 
            // fall through
          case 83: break;
          case 31: 
            { return symbol(sym.DROPN);
            } 
            // fall through
          case 84: break;
          case 32: 
            { return symbol(sym.ERASE);
            } 
            // fall through
          case 85: break;
          case 33: 
            { return symbol(sym.CLEAR);
            } 
            // fall through
          case 86: break;
          case 34: 
            { return symbol(sym.COLOR);
            } 
            // fall through
          case 87: break;
          case 35: 
            { return symbol(sym.RANGE);
            } 
            // fall through
          case 88: break;
          case 36: 
            { return symbol(sym.ROLLN);
            } 
            // fall through
          case 89: break;
          case 37: 
            { return symbol(sym.SWAPN);
            } 
            // fall through
          case 90: break;
          case 38: 
            { return symbol(sym.POV3D);
            } 
            // fall through
          case 91: break;
          case 39: 
            { return symbol(sym.WHILE);
            } 
            // fall through
          case 92: break;
          case 40: 
            { return symbol(sym.UPDATE);
            } 
            // fall through
          case 93: break;
          case 41: 
            { return symbol(sym.END_IF);
            } 
            // fall through
          case 94: break;
          case 42: 
            { return symbol(sym.LINE3D);
            } 
            // fall through
          case 95: break;
          case 43: 
            { return symbol(sym.PLOT3D);
            } 
            // fall through
          case 96: break;
          case 44: 
            { identifier = yytext().substring(FUNDEF_LEN).trim(); return symbol(sym.FUNDEF);
            } 
            // fall through
          case 97: break;
          case 45: 
            { identifier = yytext().substring(FUNDEL_LEN).trim(); return symbol(sym.FUNDEL);
            } 
            // fall through
          case 98: break;
          case 46: 
            { return symbol(sym.DOT_SIZE);
            } 
            // fall through
          case 99: break;
          case 47: 
            { identifier = yytext().substring(FUNCALL_LEN).trim(); return symbol(sym.FUNCALL);
            } 
            // fall through
          case 100: break;
          case 48: 
            { return symbol(sym.END_WHILE);
            } 
            // fall through
          case 101: break;
          case 49: 
            { return symbol(sym.END_FUNDEF);
            } 
            // fall through
          case 102: break;
          case 50: 
            { return symbol(sym.STACK_SIZE);
            } 
            // fall through
          case 103: break;
          case 51: 
            { return symbol(sym.DEBUG_BREAK);
            } 
            // fall through
          case 104: break;
          case 52: 
            { identifier = yytext().substring(MATH_CALL_LEN).trim(); return symbol(sym.JAVA_MATH_CALL);
            } 
            // fall through
          case 105: break;
          case 53: 
            { filename = yytext().substring(RUN_SCRIPT_LEN).trim(); return symbol(sym.RUN_SCRIPT);
            } 
            // fall through
          case 106: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
