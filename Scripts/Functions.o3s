fundef dec
    1.0
     -
end_fundef

fundef inc
    1.0
    +
end_fundef

fundef sum
    // stack average

    // keep stacksize and sum
    stack_size
    ?stacksize
    0.0
    ?sum

    !stacksize
    funcall dec
    while
		// drop stacksize
	    drop

	    // add sum to top value
       	!sum	
	    +
       	?sum
	
       	// dec stack_size
       	!stacksize
       	funcall dec
	    dup
       	?stacksize
    end_while

    // get sum
    clear
    !sum
end_fundef

fundef average
     stack_size
     ?elems
     funcall sum
     !elems
     /
end_fundef

fundef modulo
    ?div
    ?val
    !val
    !div
    /
    math_call floor
    dup
    ?res
    !div
    !res
    *
    !val
    //debug_break
    swap
    -
    ?rem
    !"result modulo & remain
    !res
    !rem
end_fundef

fundef std_dev
    // create global array!
    0
    0
    ?[]a

    stack_size
    2
    dupn
    ?n
    ?i
    while
        funcall dec 
        dup
        ?i
        ?[]a
        !i
    end_while
    drop

    !n
    dup
    ?i
    while
        funcall dec
        dup
        ?i
        ![]a
        !i
    end_while
    drop

    funcall average
    ?avr

    0
    ?sum

    !n
    dup
    ?i
    while
        funcall dec
        dup
        ?i
        ![]a
        !avr
        -
        2
        math_call pow
        !sum
        +
        ?sum
        !i
    end_while
    drop

    !sum
    !n
    /
    math_call sqrt
end_fundef

fundef logN
	// logN(x) = log(x) / log(N)

	// get x
	?x

	// get base
	?base

	!x
	math_call log

	!base
	math_call log

	/
end_fundef

!"basic functions 'defuned', see Functions/Script Functions menu
