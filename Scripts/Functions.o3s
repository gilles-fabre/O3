// this is the init script, it defines a few useful functions

fundef stackExchange
    // exchange elements at i,j in the stack
    ?i
    ?j
    !i
    swapn
    !j
    swapn
    !i
    swapn
end_fundef

fundef neq
    <>
end_fundef

fundef lt
    <
end_fundef

fundef lte
    <=
end_fundef

fundef gt
   >
end_fundef

fundef gte
    >=
end_fundef

fundef eq
    ==
end_fundef

fundef dec
    1.0
     -
end_fundef

fundef inc
    1.0
    +
end_fundef

fundef sum
    // stack average

    // keep stacksize and sum
    stack_size
    ?stacksize
    0.0
    ?sum

    !stacksize
    funcall dec
    while
	    // add sum to top value
       	!sum
	    +
       	?sum

       	// dec stack_size
       	!stacksize
       	funcall dec
	    dup
       	?stacksize
    end_while

    // get sum
    clear
    !sum
end_fundef

fundef average
     stack_size
     ?elems
     funcall sum
     !elems
     /
end_fundef

fundef modulo
    ?div
    ?val
    !val
    !div
    /
    math_call floor
    dup
    ?res
    !div
    !res
    *
    !val
    //debug_break
    swap
    -
    ?rem
    drop
    !"result modulo & remain
    !res
    !rem
end_fundef

fundef standardDeviation
    // create global array!
    0
    0
    ?[]a

    stack_size
    2
    dupn
    ?n
    ?i
    while
        funcall dec
        dup
        ?i
        ?[]a
        !i
    end_while

    !n
    dup
    ?i
    while
        funcall dec
        dup
        ?i
        ![]a
        !i
    end_while

    funcall average
    ?avr

    0
    ?sum

    !n
    dup
    ?i
    while
        funcall dec
        dup
        ?i
        ![]a
        !avr
        -
        2
        math_call pow
        !sum
        +
        ?sum
        !i
    end_while

    !sum
    !n
    /
    math_call sqrt
end_fundef

fundef logN
	// logN(x) = log(x) / log(N)

	// get x
	?x

	// get base
	?base

	!x
	math_call log

	!base
	math_call log

	/
end_fundef

fundef percent
    ?y
    100
    *
    !y
    /
end_fundef

fundef min
   ?min
   stack_size
   while
      dup
      ?next
      !min
      <
      if
          !next
          ?min
      end_if
      stack_size
   end_while
   !min
end_fundef

fundef max
   ?max
   stack_size
   while
      dup
      ?next
      !max
      >
      if
          !next
          ?max
      end_if
      stack_size
   end_while
   !max
end_fundef

